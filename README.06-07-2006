Ce qui marche:
- Decoder une chaine hexa en une instruction (decode)
- Afficher une instruction (render)

En cours de finition:
- Encoder une instruction (encode, encode_all)
	A faire: gestion de certain prefixes (segment override)
		gestion des fixups (encoder 'mov eax, [testic]' => ["\x42\x44zzzz", fixups = { 'testic' => (offset, longueur, encodage...) }])
- Parser une instruction (parse)
	A faire: passe finale pour verifier la coherence des arguments ("add eax, bl" doit etre rejeté), determiner les tailles pointees par un modrm
		trouver toutes les manieres possibles de parser (parse_all)

A faire:
- Desassembleur de plusieurs instructions
	Adapter libpe/libelf
	Revoir la gestion des blocs d'instruction
	GUI
- Assembler plusieurs instructions
	Gestion des labels, gerer les sauts (short/near/far, resolution automatique)
	Gestion des references externes/symboles
	Preprocesseur (commentaires, macros ...)
	Parseur de data (db, strings)
	Linkeur
- Porter MIPS

Un jour peut-etre:
- Emulation, semantique, tout ca
- Compilo C

